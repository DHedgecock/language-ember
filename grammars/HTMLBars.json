{
  "name": "Ember HTMLBars (Babel)",
  "scopeName": "source.htmlbars.js",
  "fileTypes": [],
  "patterns": [
    { "include": "#htmlbars-unescaped" },
    { "include": "#htmlbars-comment" },
    { "include": "#htmlbars-block-open" },
    { "include": "#htmlbars-block-close" },
    { "include": "#htmlbars-inline" }
  ],
  "repository": {
    "htmlbars-unescaped": {
      "comment": "Special capture to enable flagging unescaped properties using",
      "comment": "triple curlies",
      "name": "unescaped.block.htmlbars",
      "begin": "\\{\\{\\{",
      "end": "\\}\\}\\}",
      "captures": {
        "0": {
          "name": "punctuation.definition.tag.unescaped.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-property-name" }
      ]
    },
    "htmlbars-comment": {
      "name": "comment.block.htmlbars",
      "begin": "\\{\\{!((?:--)*)",
      "end": "(\\1)\\}\\}",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.htmlbars"
        }
      }
    },
    "htmlbars-block-open": {
      "name": "meta.tag.block.open.htmlbars",
      "begin": "(\\{\\{)(#)(?:(if|unless|with|each|else if|else)|([a-zA-Z0-9.-]+))",
      "end": "(\\}\\})",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "2": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "3": {
          "name": "support.function.builtin"
        },
        "4": {
          "name": "entity.name.function.block.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-block-params" },
        { "include": "#htmlbars-as-keyword" },
        { "include": "#htmlbars-subexp" },
        { "include": "#htmlbars-generic-attribute-name" },
        { "include": "#htmlbars-generic-attribute-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "htmlbars-block-close": {
      "name": "meta.tag.block.close.htmlbars",
      "begin": "(\\{\\{)(/)(?:(if|unless|with|each|else if|else)|([a-zA-Z0-9.-]+))",
      "end": "(\\}\\})",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "2": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "3": {
          "name": "support.function.builtin"
        },
        "4": {
          "name": "entity.name.function.block.htmlbars"
        }
      }
    },
    "htmlbars-inline": {
      "name": "meta.tag.inline.htmlbars",
      "begin": "(\\{\\{)(?:(if|unless|yield|else if|else)|([a-zA-Z0-9.-]+))",
      "end": "(\\}\\})",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.inline.htmlbars"
        },
        "2": {
          "name": "support.function.builtin.inline.htmlbars"
        },
        "3": {
          "name": "entity.name.function.inline.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-block-params" },
        { "include": "#htmlbars-as-keyword" },
        { "include": "#htmlbars-subexp" },
        { "include": "#htmlbars-generic-attribute-name" },
        { "include": "#htmlbars-generic-attribute-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "htmlbars-property-name": {
      "comment": "use for flagging any property, function or component name",
      "name": "string.property.htmlbars",
      "match": "(\\.*)(\\w+)",
      "captures": {
        "1": {
          "name": "string.property.variable.punctuation.htmlbars"
        },
        "2": {
          "name": "string.of.property.function.component.name.htmlbars"
        }
      }
    },
    "htmlbars-block-params": {
      "name": "keyword.block-params.htmlbars",
      "begin": "(?<!\\|)(\\|)",
      "beginCaptures": {
        "1": {
          "name": "constant.other.symbol.begin.htmlbars"
        }
      },
      "end": "(\\|)(?!\\|)",
      "endCaptures": {
        "1": {
          "name": "constant.other.symbol.end.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-block-param" }
      ]
    },
    "htmlbars-block-param": {
      "name": "variable.other.htmlbars",
      "match": "\\b([a-zA-Z0-9-_]+)\\b"
    },
    "htmlbars-as-keyword": {
      "name": "support.function.builtin.htmlbars",
      "match": "\\s\\b(as)\\b(?=\\s\\|)"
    },
    "string-double-quoted": {
      "name": "string.quoted.double.html.htmlbars",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html.htmlbars"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-comment" },
        { "include": "#htmlbars-block-open" },
        { "include": "#htmlbars-block-close" },
        { "include": "#htmlbars-inline" }
      ]
    },
    "string-single-quoted": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html.htmlbars"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html.htmlbars"
        }
      },
      "name": "string.quoted.single.html.htmlbars",
      "patterns": [
        { "include": "#htmlbars-comment" },
        { "include": "#htmlbars-block-open" },
        { "include": "#htmlbars-block-close" },
        { "include": "#htmlbars-inline" }
      ]
    },
    "htmlbars-subexp": {
      "name": "meta.tag.inline.subexp.htmlbars",
      "begin": "(\\()([a-zA-Z0-9.-]+)",
      "end": "(\\))",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "2": {
          "name": "support.function.block.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-subexp" },
        { "include": "#htmlbars-generic-attribute-name" },
        { "include": "#htmlbars-generic-attribute-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "htmlbars-generic-attribute-name": {
      "match": "(?<=[^=])\\b([a-zA-Z0-9:_.-]+)(=)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.html.htmlbars"
        },
        "2": {
          "name": "punctuation.definition.tag.htmlbars"
        }
      }
    },
    "htmlbars-generic-attribute-value": {
      "match": "\\b([a-zA-Z0-9:_.-]+)\\b",
      "name": "string.unquoted.htmlbars"
    }
  }
}
