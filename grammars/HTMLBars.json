{
  "name": "Ember HTMLBars (Babel)",
  "scopeName": "source.htmlbars.js",
  "fileTypes": [],
  "patterns": [
    { "include": "#htmlbars-unescaped" },
    { "include": "#htmlbars-comment" },
    { "include": "#htmlbars-block-open" },
    { "include": "#htmlbars-block-close" },
    { "include": "#htmlbars-inline" },
    { "include": "#html-tag" },
    { "include": "#html-comment-block" },
    { "include": "#entities" }
  ],
  "repository": {
    "htmlbars-unescaped": {
      "comment": "Special capture to enable flagging unescaped properties using",
      "comment": "triple curlies",
      "name": "unescaped.block.htmlbars",
      "begin": "\\{\\{\\{",
      "end": "\\}\\}\\}",
      "captures": {
        "0": {
          "name": "punctuation.definition.tag.unescaped.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-property-name" }
      ]
    },
    "htmlbars-comment": {
      "name": "comment.block.htmlbars",
      "begin": "\\{\\{!((?:--)*)",
      "end": "(\\1)\\}\\}",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.htmlbars"
        }
      }
    },
    "htmlbars-block-open": {
      "name": "meta.tag.block.open.htmlbars",
      "begin": "(\\{\\{)(#)(?:(if|unless|with|each|else if|else)|([a-zA-Z0-9.-]+))",
      "end": "(\\}\\})",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "2": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "3": {
          "name": "support.function.builtin"
        },
        "4": {
          "name": "entity.name.function.block.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-block-params" },
        { "include": "#htmlbars-as-keyword" },
        { "include": "#htmlbars-subexp" },
        { "include": "#htmlbars-generic-attribute-name" },
        { "include": "#htmlbars-generic-attribute-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "htmlbars-block-close": {
      "name": "meta.tag.block.close.htmlbars",
      "begin": "(\\{\\{)(/)(?:(if|unless|with|each|else if|else)|([a-zA-Z0-9.-]+))",
      "end": "(\\}\\})",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "2": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "3": {
          "name": "support.function.builtin"
        },
        "4": {
          "name": "entity.name.function.block.htmlbars"
        }
      }
    },
    "htmlbars-inline": {
      "name": "meta.tag.inline.htmlbars",
      "begin": "(\\{\\{)(?:(if|unless|yield|else if|else|action|component|concat|debugger|each|each in| get|hash|loc|log|mount|mut|outlet|partial|query-params|render|unbound)|([a-zA-Z0-9.-]+))",
      "end": "(\\}\\})",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.inline.htmlbars"
        },
        "2": {
          "name": "support.function.builtin.inline.htmlbars"
        },
        "3": {
          "name": "entity.name.function.inline.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-block-params" },
        { "include": "#htmlbars-as-keyword" },
        { "include": "#htmlbars-subexp" },
        { "include": "#htmlbars-generic-attribute-name" },
        { "include": "#htmlbars-generic-attribute-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "htmlbars-property-name": {
      "comment": "use for flagging any property, function or component name",
      "name": "string.property.htmlbars",
      "match": "(\\.*)(\\w+)",
      "captures": {
        "1": {
          "name": "string.property.variable.punctuation.htmlbars"
        },
        "2": {
          "name": "string.of.property.function.component.name.htmlbars"
        }
      }
    },
    "htmlbars-block-params": {
      "name": "keyword.block-params.htmlbars",
      "begin": "(?<!\\|)(\\|)",
      "beginCaptures": {
        "1": {
          "name": "constant.other.symbol.begin.htmlbars"
        }
      },
      "end": "(\\|)(?!\\|)",
      "endCaptures": {
        "1": {
          "name": "constant.other.symbol.end.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-block-param" }
      ]
    },
    "htmlbars-block-param": {
      "name": "variable.other.htmlbars",
      "match": "\\b([a-zA-Z0-9-_]+)\\b"
    },
    "htmlbars-as-keyword": {
      "name": "support.function.builtin.htmlbars",
      "match": "\\s\\b(as)\\b(?=\\s\\|)"
    },
    "string-double-quoted": {
      "name": "string.quoted.double.htmlbars",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.htmlbars"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-comment" },
        { "include": "#htmlbars-block-open" },
        { "include": "#htmlbars-block-close" },
        { "include": "#htmlbars-inline" }
      ]
    },
    "string-single-quoted": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.htmlbars"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.htmlbars"
        }
      },
      "name": "string.quoted.single.htmlbars",
      "patterns": [
        { "include": "#htmlbars-comment" },
        { "include": "#htmlbars-block-open" },
        { "include": "#htmlbars-block-close" },
        { "include": "#htmlbars-inline" }
      ]
    },
    "htmlbars-subexp": {
      "name": "meta.tag.inline.subexp.htmlbars",
      "begin": "(\\()([a-zA-Z0-9.-]+)",
      "end": "(\\))",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.htmlbars"
        },
        "2": {
          "name": "support.function.block.htmlbars"
        }
      },
      "patterns": [
        { "include": "#htmlbars-subexp" },
        { "include": "#htmlbars-generic-attribute-name" },
        { "include": "#htmlbars-generic-attribute-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "htmlbars-generic-attribute-name": {
      "match": "(?<=[^=])\\b([a-zA-Z0-9:_.-]+)(=)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.htmlbars"
        },
        "2": {
          "name": "punctuation.definition.tag.htmlbars"
        }
      }
    },
    "htmlbars-generic-attribute-value": {
      "match": "\\b([a-zA-Z0-9:_.-]+)\\b",
      "name": "string.unquoted.htmlbars"
    },
    "begin-html-patterns": {
      "comment": "======================================================",
      "comment": "Begin HTML Patterns",
      "comment": "======================================================"
    },
    "html-comment-block": {
      "comment": "match on any html comment block eg: <!-- -->",
      "begin": "<!--",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.html.htmlbars"
        }
      },
      "end": "--\\s*>",
      "name": "comment.block.html.htmlbars",
      "patterns": [
        {
          "match": "--",
          "name": "invalid.illegal.bad-comments-or-CDATA.html.htmlbars"
        }
      ]
    },
    "html-tag": {
      "comment": "match any html tag, handle as separate matches on open/close tags",
      "begin": "(<\\/?)(([a-zA-Z0-9:-]+))\\b",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.html.htmlbars"
        },
        "2": {
          "name": "entity.name.tag.html.htmlbars"
        }
      },
      "end": "(\\/?)(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.html.htmlbars"
        },
        "2": {
          "name": "punctuation.definition.tag.html.htmlbars"
        }
      },
      "name": "meta.tag.html.element.htmlbars",
      "patterns": [
        { "include": "#htmlbars-unescaped" },
        { "include": "#htmlbars-comment" },
        { "include": "#htmlbars-block-open" },
        { "include": "#htmlbars-block-close" },
        { "include": "#htmlbars-inline" },
        { "include": "#tag-id-attribute" },
        { "include": "#tag-generic-attribute" },
        { "include": "#string-double-quoted" },
        { "include": "#string-single-quoted" },
        { "include": "#unquoted-attribute" }
      ]
    },
    "tag-generic-attribute": {
      "comment": "eg: data-test='radical'",
      "match": "(?<=[^=])\\b([a-zA-Z0-9:-]+)",
      "name": "entity.other.attribute-name.html.htmlbars"
    },
    "tag-id-attribute": {
      "comment": "eg: id=radical",
      "begin": "\\b(id)\\b\\s*(=)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.id.html.htmlbars"
        },
        "2": {
          "name": "punctuation.separator.key-value.html.htmlbars"
        }
      },
      "end": "(?<='|\")|(?=\\s|>)",
      "name": "meta.attribute-with-value.id.html.htmlbars",
      "patterns": [
        { "include": "#string-double-quoted" },
        { "include": "#string-single-quoted" },
        { "include": "#unquoted-attribute" }
      ]
    },
    "entities": {
      "comment": "Eg: &amp;",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html.htmlbars"
            },
            "3": {
              "name": "punctuation.definition.entity.html.htmlbars"
            }
          },
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "name": "constant.character.entity.html.htmlbars"
        },
        {
          "match": "&",
          "name": "invalid.illegal.bad-ampersand.html.htmlbars"
        }
      ]
    },
    "unquoted-attribute": {
      "comment": "Eg: checked=true",
      "match": "(?<==)(?:[^\\s<>/'\"]|/(?!>))+",
      "name": "string.unquoted.html.htmlbars"
    }
  }
}
