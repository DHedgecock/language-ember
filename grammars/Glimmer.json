{
  "name": "Ember Glimmer",
  "scopeName": "source.glimmer",
  "fileTypes": [
    "hbs"
  ],
  "patterns": [
    { "include": "#glimmer-unescaped-expression" },
    { "include": "#glimmer-comment" },
    { "include": "#glimmer-expression" },
    { "include": "#html-tag" },
    { "include": "#html-comment" },
    { "include": "#entities" }
  ],
  "repository": {
    "glimmer-unescaped-expression": {
      "comment": "Capture unescaped expressions of triple curlies",
      "name": "entity.unescaped.expression.glimmer",
      "begin": "{{{",
      "end": "}}}",
      "captures": {
        "0": {
          "name": "punctuation.definition.block.unescaped.glimmer"
        }
      },
      "patterns": [
        { "include": "#glimmer-subexp" },
        { "include": "#glimmer-property-name" }
      ]
    },
    "glimmer-comment": {
      "name": "comment.block.glimmer",
      "begin": "{{!(--)*",
      "note": "capture group of -- used to handle matching end tag",
      "end": "(\\1)}}",
      "captures": {
        "0": {
          "name": "punctuation.definition.block.comment.glimmer"
        }
      }
    },
    "glimmer-expression": {
      "name": "entity.expression.glimmer",
      "begin": "({{)(#)*(\/)*(?:(if|unless|with|each-in|each|else if|else|eq|not-eq|and|or|xor|gt|gte|lt|lte|is-array|is-equal|action|component|concat|debugger| get|hash|loc|log|mount|mut|outlet|partial|query-params|render|unbound)(?!-)\\b|([a-zA-Z0-9_/.-]+))",
      "end": "(}})",
      "captures": {
        "1": {
          "name": "punctuation.definition.block.glimmer"
        },
        "2": {
          "name": "punctuation.definition.block.glimmer"
        },
        "3": {
          "name": "punctuation.definition.block.glimmer"
        },
        "4": {
          "name": "support.function.builtin"
        },
        "5": {
          "name": "entity.name.function.block.glimmer"
        }
      },
      "patterns": [
        { "include": "#as-keyword" },
        { "include": "#as-params" },
        { "include": "#glimmer-subexp" },
        { "include": "#glimmer-property" },
        { "include": "#glimmer-property-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "begin-html-patterns": {
      "comment": "======================================================",
      "comment": "Begin HTML Patterns",
      "comment": "======================================================"
    },
    "html-comment": {
      "comment": "match on any html comment block eg: <!-- -->",
      "begin": "<!--",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.html.glimmer"
        }
      },
      "end": "--\\s*>",
      "name": "comment.block.html.glimmer",
      "patterns": [
        {
          "match": "--",
          "name": "invalid.illegal.bad-comments-or-CDATA.html.glimmer"
        }
      ]
    },
    "html-tag": {
      "comment": "match any html tag, handle as separate matches on open/close tags",
      "begin": "(<\\/?)(([a-zA-Z0-9:-]+))\\b",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.html.glimmer"
        },
        "2": {
          "name": "entity.name.tag.html.glimmer"
        }
      },
      "end": "(\\/?)(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.html.glimmer"
        },
        "2": {
          "name": "punctuation.definition.tag.html.glimmer"
        }
      },
      "name": "meta.tag.html.element.glimmer",
      "patterns": [
        { "include": "#glimmer-unescaped-expression" },
        { "include": "#glimmer-comment" },
        { "include": "#glimmer-expression" },
        { "include": "#html-attribute" },
        { "include": "#string-double-quoted" },
        { "include": "#string-single-quoted" },
        { "include": "#unquoted-attribute-value" }
      ]
    },
    "entities": {
      "comment": "Eg: &amp;",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html.glimmer"
            },
            "3": {
              "name": "punctuation.definition.entity.html.glimmer"
            }
          },
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "name": "constant.character.entity.html.glimmer"
        },
        {
          "match": "&",
          "name": "invalid.illegal.bad-ampersand.html.glimmer"
        }
      ]
    },
    "begin-util-patterns": {
      "comment": "======================================================",
      "comment": "Begin Util Patterns",
      "comment": "======================================================"
    },
    "as-keyword": {
      "comment": "matches the 'as' when creating params: as |someParam|",
      "name": "support.function.builtin.glimmer",
      "match": "\\s\\b(as)\\b(?=\\s\\|)"
    },
    "as-params": {
      "comment": "Matches the params inside pipes: as |someParam|",
      "name": "keyword.block-params.glimmer",
      "begin": "(?<!\\|)(\\|)",
      "beginCaptures": {
        "1": {
          "name": "constant.other.symbol.begin.glimmer"
        }
      },
      "end": "(\\|)(?!\\|)",
      "endCaptures": {
        "1": {
          "name": "constant.other.symbol.end.glimmer"
        }
      },
      "patterns": [
        { "include": "#variable" }
      ]
    },
    "glimmer-subexp": {
      "comment": "matches any subexpressions within glimmer expressions: {{something someValue=(helper someProp)}}",
      "name": "entity.subexp.glimmer",
      "begin": "(\\()([a-zA-Z0-9.-]+)",
      "end": "(\\))",
      "captures": {
        "1": {
          "name": "punctuation.definition.subexpression.glimmer"
        },
        "2": {
          "name": "support.function.block.glimmer"
        }
      },
      "patterns": [
        { "include": "#glimmer-subexp" },
        { "include": "#glimmer-property" },
        { "include": "#glimmer-property-value" },
        { "include": "#string-single-quoted" },
        { "include": "#string-double-quoted" }
      ]
    },
    "glimmer-property-name": {
      "comment": "use for flagging any property, function or component name",
      "comment": "eg: {{someProp}} where pattern matches someProp",
      "comment": "currently only in use by unescaped pattern",
      "name": "string.property.glimmer",
      "match": "(\\.*)(\\w+)",
      "captures": {
        "1": {
          "name": "string.property.variable.punctuation.glimmer"
        },
        "2": {
          "name": "string.of.property.function.component.name.glimmer"
        }
      }
    },
    "variable": {
      "name": "variable.other.glimmer",
      "match": "\\b([a-zA-Z0-9-_]+)\\b"
    },
    "string-double-quoted": {
      "name": "string.quoted.double.glimmer",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.glimmer"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.glimmer"
        }
      },
      "patterns": [
        { "include": "#glimmer-comment" },
        { "include": "#glimmer-expression" }
      ]
    },
    "string-single-quoted": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.glimmer"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.glimmer"
        }
      },
      "name": "string.quoted.single.glimmer",
      "patterns": [
        { "include": "#glimmer-comment" },
        { "include": "#glimmer-expression" }
      ]
    },
    "glimmer-property": {
      "match": "(?<=[^=])\\b([a-zA-Z0-9:_.-]+)(=)",
      "captures": {
        "1": {
          "name": "entity.other.property.attribute-name.glimmer"
        },
        "2": {
          "name": "punctuation.definition.tag.glimmer"
        }
      }
    },
    "glimmer-property-value": {
      "match": "\\b(true|false)|([a-zA-Z0-9:_.-]+)\\b",
      "captures": {
        "1": {
          "name": "constant.language.boolean.glimmer"
        },
        "2": {
          "name": "string.unquoted.property.glimmer"
        }
      }
    },
    "html-attribute": {
      "comment": "match html attributes and flags id as special attribute",
      "comment": "eg: class=",
      "match": "(?<=[^=])\\b(id)|([a-zA-Z0-9:_.-]+)(=)",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.id.html.glimmer"
        },
        "2": {
          "name": "entity.other.attribute-name.glimmer"
        },
        "3": {
          "name": "punctuation.separator.key-value.html.glimmer"
        }
      }
    },
    "unquoted-attribute-value": {
      "comment": "Eg: checked=true will match 'true'",
      "match": "(?<==)(?:[^\\s<>/'\"]|/(?!>))+",
      "name": "string.unquoted.html.glimmer"
    }
  }
}
